FORMAT: 1A

# GALB API

# Authentication

All of the API routes except login, and create user, need authentication.
To do so, include a ("x-auth",$token) pair in the request header, where $token
is the unique auth token for each user.

# Group User

## User Collection [/users]

### Create a user [POST]

Create a user profile. The request body should be a JSON-encoded object containing the following keys:
+ displayName (required, string) - user's display name
+ firstName (required, string) - user's first name
+ lastName (required, string) - user's last name
+ age (required, number) - user's age
+ gender (required, number) - 0 for female, 1 for male
+ email (required, string) - email address for the user
+ profilePic (string) - URL for the user's profile picture
+ password (required, string) - raw password for the account

+ Response 201 (application/json)

  User profile was successfully created

## User [/users/:userid]

### View a user [GET]

Get the json-encoded object of the requested user's info. The response would be different depending on whether the
calling user is friend/self/blocked/other with the user requested.

+ Response 200 (application/json)

  Profile was created successfully

  + Body

  {
      "_id": "596ae5deddaa262f7586e8db",
      "username": "jsmith",
      "displayName": "John Smith",
      "firstName": "John",
      "lastName": "Smith",
      "age": 23,
      "gender": 1,
      "email": "jsmith@gmail.com",
      "blocked_users": [],
      "friend_requests": [],
      "friends": []
  }

### Update a user [PUT]
Update the current user's profile information. The request body should be a JSON object containing key-value pairs of which need to be updated.
Set the value to `null` to unset the field (only when the field is not required).
For example `{profilePic:null}` would unset the profilePic

+ Response 202 (application/json)

  User information was successfully updated


## User Collection <for development use> [/user/dev]

### View a list of users <development use> [GET]

### Create a list of fake users <development use> [POST]

### Delete whole list of users <development use> [DELETE]

# Group Event

## Event Collection [/event]

### View a list of events [GET]

### Create an event [POST]

## Event [/event/:eventId]

### View an event [GET]

### Update event info [PUT]

### Delete an event [DELETE]

## Event Attendee Collection [/event/:eventId/attendee]

### Get the whole list of attendees of an event [GET]

## Event Attendee [/event/:eventId/attendee/:userId]

### Add user :userId to the attendees list [POST]

### Remove user :userId from the attendee list [DELETE]

## Event Admin Collection [/event/:eventId/admin]

### Get the whole list of admins of an event [GET]

## Event Admin [/event/:eventId/admin/:userId]

### Add user :userId to the admin list [POST]

### Remove user :userId from the admin list [DELETE]
