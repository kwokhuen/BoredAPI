FORMAT: 1A

# GALB API

## Terminology

### calling_user

The user who owns the authentication token, aka, the user who make the API call.

### userId_user

The user specified by the :userId in the route.

## Authentication

All of the API routes except login, and create user, (and developer routes) need authentication.
To do so, include a ("x-auth",$token) pair in the request header, where $token
is the auth token for the session.

+ Request

  + Headers

        x-auth: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1OTZhZTVkZWRkYWEyNjJmNzU4NmU4ZGIiLCJhY2Nlc3MiOiJhdXRoIiwiaWF0IjoxNTAwMTc3ODg3fQ.mnilz-agOiLhBF8g4k24lN9x9AXNoHpB_KyZ8-fUNNo

# Group User

## User Collection [/users]

### Create a user [POST]

Create a user profile. The request body should be a JSON-encoded object containing the following keys:

+ Request
  + Body
  displayName (required, string) - user's display name
  username (required, string) - username
  firstName (required, string) - user's first name
  lastName (required, string) - user's last name
  age (required, number) - user's age
  gender (required, number) - 0 for female, 1 for male
  email (required, string) - email address for the user
  profilePic (not required, string) - URL for the user's profile picture
  password (required, string) - raw password for the account

+ Response 201

  User profile was successfully created

## User [/users/:userid]

### View a user [GET]

Get the json-encoded object of the requested user's info. The response would be different depending on whether the
calling user is friend/self/blocked/other with the user requested.

+ Response 200 (application/json)
  + Body

    {
      _id: (Number) the ObjectId of the User in MongoDb database
      username: (String)
      displayName: (String)
      firstName: (String)
      lastName: (String)
      age: (Number)
      gender: (Number) 0 for female, 1 for male
      email: (String)
      blocked_users: (Array of Number) Array of _id's of users that are blocked by requested user
      friend_requests: (Array of Number) Array of _id's of users who have sent friend requests to requested user
      friends: (Array of Number) Array of _id's of friends
      rating: (Number)
      hasBlocked: (Boolean)
      isFriend: (Boolean)
      hasRated: (Boolean)
      isSelf: (Boolean)
    }

### Update a user [PUT]
Update the current user's profile information. The request body should be a JSON object containing key-value pairs of which need to be updated.
Set the value to `null` to unset the field (only when the field is not required).
For example `{profilePic:null}` would unset the profilePic

Permission: calling user

+ Response 202 (application/json)

  User information was successfully updated

## Send/Cancel friend request routes [/users/:userid/friendRequest]

### Send friend request [POST]

Permission: all logged-in users except userId_user themselves and users blocked by userId_user

+ Response 202

  Friend request was successfully sent

### Cancel friend request [DELETE]

Permission: users who has sent friend request to userId_user

+ Response 202

  Friend request was successfully cancelled

## Ignore friend request [/users/:userid/ignoreRequest]

### Ignore friend request from userId_user [POST]

Permission: users who received friend request from userId_user

+ Response 202

  Friend request was successfully ignored

## Friend list [/users/:userid/friends]

### View friend list of userId_user [GET]

Permission: friends of userId_user

+ Response 202 (application/json)

  {
    _id
    displayName
    firstName
    lastName
    age
    username
  }

### Confirm friend request from userId_user [POST]

Permission: users who received friend requests from userId_user

### Unfriend userId_user [DELETE]

Permission: friends of userId_user

## block users [/users/:userid/block]

### View blocked_list of userId_user [GET]

Permission: userId_user only

### Block userId_user [POST]

Permission: users not blocked by userId_user

### Unblock userId_user [DELETE]

Permission: users who have blocked userId_user

## User Collection <for development use> [/user/dev]

### View all users <development use> [GET]

### Create a list of fake users <development use> [POST]

### Delete all users <development use> [DELETE]

# Group Event

## Event Collection [/event]

### View a list of events [GET]

### Create an event [POST]

## Event [/event/:eventId]

### View an event [GET]

### Update event info [PUT]

### Delete an event [DELETE]

## Event Attendee Collection [/event/:eventId/attendee]

### Get the whole list of attendees of an event [GET]

## Event Attendee [/event/:eventId/attendee/:userId]

### Add user :userId to the attendees list [POST]

### Remove user :userId from the attendee list [DELETE]

## Event Admin Collection [/event/:eventId/admin]

### Get the whole list of admins of an event [GET]

## Event Admin [/event/:eventId/admin/:userId]

### Add user :userId to the admin list [POST]

### Remove user :userId from the admin list [DELETE]
